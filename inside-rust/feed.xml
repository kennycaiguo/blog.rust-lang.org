<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-04-13T05:50:53.396124980+00:00</updated>

    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/10/upcoming-compiler-team-design-meeting.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-04-10T00:00:00+00:00</published>
        <updated>2020-04-10T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/10/upcoming-compiler-team-design-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/10/upcoming-compiler-team-design-meeting.html">&lt;p&gt;In our &lt;a href=&quot;https://zulip-archive.rust-lang.org/131828tcompiler/95526planningmeeting20200410.html&quot;&gt;planning meeting today&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On April 3rd (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=M3I2N2tscWtjMnUxa2kxbmZoaGxqY2hqZmwgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/267&quot;&gt;rust-lang/compiler-team#267&lt;/a&gt;, which is a proposal to move the
ownership over the standard library &lt;em&gt;implementation&lt;/em&gt; (but not
specification) to the compiler team.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>April Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/10/lang-team-design-meetings.html" type="text/html" title="April Lang Team Design Meetings" />
        <published>2020-04-10T00:00:00+00:00</published>
        <updated>2020-04-10T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/10/lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/10/lang-team-design-meetings.html">&lt;p&gt;We've scheduled our &lt;strong&gt;language team design meetings&lt;/strong&gt; for April. We have plans
for three meetings:&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#try-blocks-try-traits-functions-that-try-oh-my&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;try-blocks-try-traits-functions-that-try-oh-my&quot;&gt;&lt;/a&gt;try blocks, Try traits, functions that try, oh my!&lt;/h1&gt;
&lt;p&gt;(Update: tentatively moved to May 4.)&lt;/p&gt;
&lt;p&gt;Clear the path to stabilizing &lt;code&gt;try&lt;/code&gt; blocks and the &lt;code&gt;Try&lt;/code&gt; trait, and identify
some next steps for function-level try.&lt;/p&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/issues/70941&quot;&gt;Resolving &lt;code&gt;Ok&lt;/code&gt;-wrapping for &lt;code&gt;try&lt;/code&gt;
blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Discuss revisions to the &lt;code&gt;Try&lt;/code&gt; trait required for stabilization.&lt;/li&gt;
&lt;li&gt;Discuss syntax for early exit from a &lt;code&gt;try&lt;/code&gt; with an error (&lt;code&gt;Err(e)?&lt;/code&gt;): &lt;code&gt;fail&lt;/code&gt;,
&lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;raise&lt;/code&gt;, &lt;code&gt;yeet&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;If we have time, talk some about possibilities for function-level &lt;code&gt;try&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href=&quot;#april-20----edition-planning&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;april-20----edition-planning&quot;&gt;&lt;/a&gt;April 20 -- Edition planning&lt;/h1&gt;
&lt;p&gt;Plan the 2021 edition, with a checklist of language features we will need to
land in 2020 if we want to ship them in Rust 2021. We hope to emerge from this
meeting with a checklist to guide our efforts, which we can adapt through the
process.&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#april-27----type-aliases-and-traits-enforcement&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;april-27----type-aliases-and-traits-enforcement&quot;&gt;&lt;/a&gt;April 27 -- Type aliases and traits enforcement&lt;/h1&gt;
&lt;p&gt;Long-standing issue: &lt;code&gt;type Foo&amp;lt;T: Trait&amp;gt; = ...&lt;/code&gt; doesn't enforce &lt;code&gt;T: Trait&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Goal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discuss the situation with type aliases and decide what actions we may want
to take.&lt;/li&gt;
&lt;li&gt;Or, if we don't reach a decision, decide what measurements we might need to
reach one.&lt;/li&gt;
&lt;li&gt;Ideally, decide about &lt;a href=&quot;https://github.com/rust-lang/rust/pull/69741&quot;&gt;estebank's
PR&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#about-the-language-team-design-meetings&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;about-the-language-team-design-meetings&quot;&gt;&lt;/a&gt;About the language team design meetings&lt;/h2&gt;
&lt;p&gt;The idea of the design meeting is that it's a time for us to have in-depth
discussions on some particular topic. This might be a burning problem that
we've discovered, an update on some existing design work, or a forward looking
proposal.&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They are typically
also recorded and posted online, along with minutes, after the fact. They
generally take place on Mondays at noon Eastern time, 9am Pacific time -- but
for the precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team calendar&lt;/a&gt;. Scheduled
meetings are subject to change and cancelation. In that case, the calendar
events will be updated.&lt;/p&gt;
</content>

        <author>
            <name>Josh Triplett</name>
        </author>
    </entry>
    
    <entry>
        <title>Update on the GitHub Actions evaluation</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html" type="text/html" title="Update on the GitHub Actions evaluation" />
        <published>2020-04-07T00:00:00+00:00</published>
        <updated>2020-04-07T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html">&lt;p&gt;The infrastructure team is happy to report that &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2019/11/14/evaluating-github-actions.html&quot;&gt;the evaluation we started last
year&lt;/a&gt; of &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt; as the new CI platform for the
&lt;a href=&quot;https://github.com/rust-lang/rust&quot;&gt;rust-lang/rust&lt;/a&gt; repository is making progress!&lt;/p&gt;
&lt;p&gt;On March 20th, 2020 we merged &lt;a href=&quot;https://github.com/rust-lang/rust/pull/70190&quot;&gt;PR #70190&lt;/a&gt;, adding the GitHub Actions
configuration to the compiler repository. We’re still gating merges on the
existing Azure Pipelines setup, but running the two providers side by side
allows us to find bugs in the GitHub Actions configuration without impacting
the work of our contributors.&lt;/p&gt;
&lt;p&gt;Once &lt;a href=&quot;https://github.com/rust-lang/rust/labels/A-github-actions&quot;&gt;all outstanding issues&lt;/a&gt; are fixed, the Infrastructure Team
will make the decision to either switch to GitHub Actions or stay on Azure
Pipelines. We expect the decision to happen in a couple of months.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-changing-with-github-actions&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-changing-with-github-actions&quot;&gt;&lt;/a&gt;What’s changing with GitHub Actions?&lt;/h2&gt;
&lt;p&gt;This change should have no visible effect to any user of Rust, but will greatly
improve the experience of our contributors.&lt;/p&gt;
&lt;p&gt;The main difference our contributors are going to notice is a big reduction of
our CI times. In the current Azure Pipelines setup builds regularly take more
than 3 hours to finish (with 60 parallel 2-core VMs), while we expect the new
GitHub Actions setup to take less than half the time to finish a build, thanks
to a dedicated pool of 8-core VMs GitHub generously prepared for us.&lt;/p&gt;
&lt;p&gt;Another technical change is that we’re now running most CI builds on the
&lt;a href=&quot;https://github.com/rust-lang-ci/rust&quot;&gt;rust-lang-ci/rust&lt;/a&gt; fork. This should only impact team members that want to get
a list of all the past builds, and should be completly transparent to everyone
else thanks to our integration bot &lt;a href=&quot;https://github.com/rust-lang/homu&quot;&gt;@bors&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#what-configuration-is-the-project-using&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-configuration-is-the-project-using&quot;&gt;&lt;/a&gt;What configuration is the project using?&lt;/h2&gt;
&lt;p&gt;Our CI configuration is available at &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/src/ci/github-actions/ci.yml&quot;&gt;&lt;code&gt;src/ci/github-actions/ci.yml&lt;/code&gt;&lt;/a&gt;.
Note that our configuration is not using the standard GitHub Actions syntax,
but we’re relying on a preprocessor to expand YAML anchors to ease the
maintenance work on our end.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#why-are-you-moving-away-from-azure-pipelines&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;why-are-you-moving-away-from-azure-pipelines&quot;&gt;&lt;/a&gt;Why are you moving away from Azure Pipelines?&lt;/h2&gt;
&lt;p&gt;We're happy with Azure Pipelines as a product, but both Microsoft and GitHub
asked us to try GitHub Actions as it's more closely integrated into the GitHub
workflow we already use. After we used it for a while in other repositories we
were satisfied enough to start evaluating a migration for &lt;a href=&quot;https://github.com/rust-lang/rust&quot;&gt;rust-lang/rust&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Traits working group 2020 sprint 1 summary</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html" type="text/html" title="Traits working group 2020 sprint 1 summary" />
        <published>2020-03-28T00:00:00+00:00</published>
        <updated>2020-03-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html">&lt;p&gt;This Tuesday, the traits working group finished our first sprint of 2020, last 6 weeks from February 11th through March 24th. The last sprint was about a year ago, but we decided to resurrect the format in order to help push forward traits-related work in &lt;a href=&quot;https://github.com/rust-lang/chalk&quot;&gt;Chalk&lt;/a&gt; and rustc.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#what-is-wg-traits-and-what-do-we-do&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-is-wg-traits-and-what-do-we-do&quot;&gt;&lt;/a&gt;What is wg-traits and what do we do?&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;#goal-an-efficient-extensible-and-reusable-crate-for-the-rust-trait-system&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;goal-an-efficient-extensible-and-reusable-crate-for-the-rust-trait-system&quot;&gt;&lt;/a&gt;Goal: An efficient, extensible, and reusable crate for the Rust trait system&lt;/h3&gt;
&lt;p&gt;The overarching goal of the &lt;a href=&quot;https://rust-lang.github.io/wg-traits/&quot;&gt;traits working group&lt;/a&gt; is to create a performant, extensible, and clean implementation of Rust's trait system. This implementation should scale not only to existing Rust features but also to new and upcoming features, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implied bounds (&lt;a href=&quot;https://rust-lang.github.io/rfcs/2089-implied-bounds.html&quot;&gt;RFC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Const generics (&lt;a href=&quot;https://rust-lang.github.io/rfcs/2000-const-generics.html&quot;&gt;RFC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Generic associated types (GATs) (&lt;a href=&quot;https://rust-lang.github.io/rfcs/1598-generic_associated_types.html&quot;&gt;RFC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Inherent associated items (&lt;a href=&quot;https://github.com/rust-lang/rust/issues/8995&quot;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As if that weren't enough, we'd like the implementaton to be &lt;strong&gt;reusable&lt;/strong&gt;, too -- meaning that it can be used by rustc, yes, but also rust-analyzer and potentially other contexts as well.&lt;/p&gt;
&lt;p&gt;This effort is part of one of the big, longer term goals for the compiler team: &lt;strong&gt;library-ification&lt;/strong&gt;. This refers to the idea of breaking apart the compiler into independent libraries that can be learned, tested, and developed independently.&lt;/p&gt;
&lt;p&gt;In order to achieve these and future features, our work is split into two parts: 1) Improving rustc's existing trait solver. 2) Design and implement the &lt;a href=&quot;https://github.com/rust-lang/chalk&quot;&gt;Chalk&lt;/a&gt; trait solver, work towards integration into rustc. The Chalk trait solver, briefly, is a logic-based trait solver, designed to be independent of rustc internals. In addition to it being more powerful than the current rustc trait solving implementation, Chalk can be used as a library for compiler-related work, such as IDE integration (e.g. &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer&quot;&gt;rust-analyzer&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Coming into 2020, we — the traits working group — knew we wanted to get more organized and start to push more on getting Chalk fully integrated into rustc, by cleaning up the Chalk codebase itself, fixing bugs, implementing new features, and ultimately integrating Chalk into rustc itself. In addition, we are committed to documenting design considerations and decisions for better accesibility now and in the future. For example, we now publish a Chalk &lt;a href=&quot;http://rust-lang.github.io/chalk/book/&quot;&gt;book&lt;/a&gt; which, while incomplete, attempts to document the Chalk internals somewhat akin to the &lt;a href=&quot;https://rustc-dev-guide.rust-lang.org/&quot;&gt;rustc dev guide&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#a-note-about-chalk-integration-in-rustc&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;a-note-about-chalk-integration-in-rustc&quot;&gt;&lt;/a&gt;A note about Chalk integration in rustc&lt;/h4&gt;
&lt;p&gt;An experimental integration of Chalk was in rustc (under the &lt;code&gt;-Z chalk&lt;/code&gt; flag) for over a year, but since its initial implementation, little work had been done while much work had been done on Chalk itself. This ultimately meant that the initial implementation based on the older Chalk version looks very different from what an implementation based on the current Chalk would and should look like. Under this reasoning, that experimental implementation has been removed.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#2020-sprint-1&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-sprint-1&quot;&gt;&lt;/a&gt;2020 sprint 1&lt;/h2&gt;
&lt;p&gt;Ok, with the background finished, that brings us to the actual 2020 sprint 1. Going into this, we didn't &lt;em&gt;quite&lt;/em&gt; know what our goals would be. In this post, we'll share an overview of each of the things that were accomplished during this sprint, which actually was quite a lot!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#credit-where-credit-is-due&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;credit-where-credit-is-due&quot;&gt;&lt;/a&gt;Credit where credit is due&lt;/h3&gt;
&lt;p&gt;A big thank you :hearts: to the folks who participated in this sprint:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidbarsky&quot;&gt;David Barsky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/detrumi&quot;&gt;detrumi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flodiebold&quot;&gt;Florian Diebold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jackh726&quot;&gt;Jack Huey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/crlf0710&quot;&gt;Charles Lew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yaahc&quot;&gt;Jane Lusby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-traits-skill-tree&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-traits-skill-tree&quot;&gt;&lt;/a&gt;wg-traits skill tree&lt;/h3&gt;
&lt;p&gt;Our &amp;quot;&lt;a href=&quot;https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html&quot;&gt;skill tree&lt;/a&gt;&amp;quot; is how we track our &lt;a href=&quot;https://rust-lang.github.io/wg-traits/roadmap.html&quot;&gt;development roadmap&lt;/a&gt;. It shows some of the major goals we are working towards (e.g., having chalk be usable as a standalone library) along with some of the major tasks that we have to complete along the way. You can click on the tasks to be taken to a github issue or other explanation. We try to update it after every meeting so that we have some idea of what we're doing and why.&lt;/p&gt;
&lt;p&gt;The skill tree structure was inspired by &lt;a href=&quot;https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/&quot;&gt;this blog post about WebAssembly&lt;/a&gt;, which in turn borrowed the term from games. Sadly, the current tool that generates the skill tree doesn't yet make anything as beautiful as the hand-drawn art in the WASM post. If anybody is interested in improving the tool's output, that is on the list of 'stretch goals' for this coming sprint!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#chalk-book-chalk-engine-chapter&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;chalk-book-chalk-engine-chapter&quot;&gt;&lt;/a&gt;Chalk book &lt;code&gt;chalk-engine&lt;/code&gt; chapter&lt;/h3&gt;
&lt;p&gt;As mentioned before, in our effort to document Chalk internals, we started publishing a &lt;a href=&quot;http://rust-lang.github.io/chalk/book/&quot;&gt;book&lt;/a&gt; late last year. Near the beginning of this sprint, we added a whole chapter about &lt;a href=&quot;http://rust-lang.github.io/chalk/book/engine.html&quot;&gt;&lt;code&gt;chalk-engine&lt;/code&gt;&lt;/a&gt; itself. This is the core crate of Chalk that solves a given set of &lt;code&gt;Goal&lt;/code&gt;s. While there is always more that can be documented, we hope this at least is a start in helping people, potentially newcomers, to understand how Chalk works internally.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#work-on-basic-support-for-impl-trait&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;work-on-basic-support-for-impl-trait&quot;&gt;&lt;/a&gt;Work on basic support for &lt;code&gt;impl Trait&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In Rust, there are a few places, currently and in the future, where you may specify &lt;code&gt;impl Trait&lt;/code&gt; instead of a specific struct. For example, the signature of a function may be &lt;code&gt;fn foo() -&amp;gt; impl Debug&lt;/code&gt;. Another place where you may use the &lt;code&gt;impl Trait&lt;/code&gt; syntax in the future is with &lt;code&gt;type Foo = impl Trait&lt;/code&gt; (currently under the &lt;a href=&quot;https://github.com/rust-lang/rust/issues/63063&quot;&gt;&lt;code&gt;type_alias_impl_trait&lt;/code&gt;&lt;/a&gt; feature). This would allow you to use &lt;code&gt;Foo&lt;/code&gt; as if it was a concrete type. During this sprint, we made significant progress in allowing both of these to work with Chalk. We'll be doing follow-up work on this in the upcoming sprint, and hopefully landing support.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#creating-a-proposal-for-a-shared-type-library&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;creating-a-proposal-for-a-shared-type-library&quot;&gt;&lt;/a&gt;Creating a proposal for a shared type library&lt;/h3&gt;
&lt;p&gt;Currently, rustc, rust-analyzer, and chalk each represent Rust types using a different set of structs. This means that when rustc or rust-analyzer wish to invoke chalk functions, we have to convert the representation of Rust types back and forth. This is fine for the time being, but eventually we would like to be having everyone use the same representation, so that no interconversion is required. This is a bit tricky, though, because the requirements of rustc (a batch compiler) and rust-analyzer (an IDE) are somewhat different. During this sprint, we wrote up a proposal for a shared type library, and led a design meeting on the topic. You can find the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/design-meeting/2020-03-12-shared-library-for-types/&quot;&gt;record of that meeting here&lt;/a&gt;, which also includes the proposal.&lt;/p&gt;
&lt;p&gt;During this upcoming sprint, we'll be following up on this design by starting to do some of the preliminary refactorings in rustc.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#refactoring-for-passing-interner-around&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;refactoring-for-passing-interner-around&quot;&gt;&lt;/a&gt;Refactoring for passing &lt;code&gt;Interner&lt;/code&gt; around&lt;/h3&gt;
&lt;p&gt;One of the requirements for a shared type library is that it needs to support interning and arena allocation of types. &lt;em&gt;Interning&lt;/em&gt; a type means to re-use the same memory each time you have an equivalent type, rather than allocating multiples copies. &lt;em&gt;Arena allocation&lt;/em&gt; is a memory management strategy where you allocate all the memory in an ever-growing pool and then free the entire pool at once, rather than tracking and freeing individual allocations.&lt;/p&gt;
&lt;p&gt;Chalk's existing type library was implemented with simplicity in mind, however, and couldn't support either of these use-cases. The problem was that to support interning and arena allocation, you need to track around an &lt;em&gt;interner&lt;/em&gt; variable that contains the hash-maps, arenas, and other supporting data structures, and chalk's APIs didn't have any space for that. This sprint, we fixed that, so that we now pass along an &lt;code&gt;interner&lt;/code&gt; value throughout chalk, meaning we can bridge to rustc and rust-analyzer more easily.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#refactoring-how-chalk-represents-bound-types-and-lifetimes&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;refactoring-how-chalk-represents-bound-types-and-lifetimes&quot;&gt;&lt;/a&gt;Refactoring how chalk represents bound types and lifetimes&lt;/h3&gt;
&lt;p&gt;Some of the details of how chalk represented types with &lt;em&gt;bound variables&lt;/em&gt; (e.g., the &lt;code&gt;'a&lt;/code&gt; in &lt;code&gt;for&amp;lt;'a&amp;gt; fn(&amp;amp;'a u32)&lt;/code&gt;) differed from how rustc was handling such types. This made bridging from rustc to chalk much harder.  We found that the design we ultimately want was a hybrid of what rustc and and chalk have. During this sprint, we did most of the chalk refactoring, and in the upcoming sprint, we'll work on the rustc side of the work.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#work-on-adding-tracing-support-to-chalk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;work-on-adding-tracing-support-to-chalk&quot;&gt;&lt;/a&gt;Work on adding &lt;code&gt;tracing&lt;/code&gt; support to Chalk&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://crates.io/crates/tracing&quot;&gt;&lt;code&gt;tracing&lt;/code&gt;&lt;/a&gt; crate provides a framework for collecting event-based diagnostic information. Currently, in Chalk, we only have basic logging support. By adding &lt;code&gt;tracing&lt;/code&gt; support, we expect to get more fine-grained control of Chalk diagnostics. Initial support is nearly finished and hopefully will get merged soon.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#exploratory-rustc-integration-mvp&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;exploratory-rustc-integration-mvp&quot;&gt;&lt;/a&gt;Exploratory rustc integration MVP&lt;/h3&gt;
&lt;p&gt;As mentioned before, the previous experimental Chalk integration was removed from rustc since it was outdated. Since there are quite a few design differences between Chalk and rustc's current trait solver, some subtle, it's not always clear what &lt;em&gt;exactly&lt;/em&gt; needs to be modified to makes things work correctly. We have &lt;a href=&quot;https://github.com/rust-lang/rust/pull/69406&quot;&gt;started&lt;/a&gt; writing the experimental Chalk integration. The goal, at least to start, is to create a minimal implementation as a basis for future work. While the pull request is not &lt;em&gt;quite&lt;/em&gt; there, it's close and has been tremendously helpful in uncovering blocking issues in Chalk that hold up progress.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#exploratory-recursive-solver&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;exploratory-recursive-solver&quot;&gt;&lt;/a&gt;Exploratory recursive solver&lt;/h3&gt;
&lt;p&gt;One of the interesting aspects of chalk's design is that it separates out the &lt;strong&gt;solver strategy&lt;/strong&gt; from other parts of the trait system implementation. In addition to our existing solver, the so-called &lt;a href=&quot;http://smallcultfollowing.com/babysteps/blog/2018/01/31/an-on-demand-slg-solver-for-chalk/&quot;&gt;&amp;quot;on demand slg solver&amp;quot;&lt;/a&gt;, we are exploring a &lt;a href=&quot;https://gist.github.com/nikomatsakis/bfbdbe588d6fc61ecb09e3b51847fb7c&quot;&gt;&amp;quot;recursive solver&amp;quot;&lt;/a&gt; design. We began by resurrecting an older version of this code that was removed and have been exploring adapting it to the newer ideas.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#minor-chalk-cleanups&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;minor-chalk-cleanups&quot;&gt;&lt;/a&gt;Minor Chalk cleanups&lt;/h3&gt;
&lt;p&gt;Over the last sprint, there have been a couple smaller cleanups to Chalk to mention. It can build rustc again, passing rustc's lints. We removed an unneeded dependency (well, it's technically there for tests). Finally, we also made Chalk a bit more panic-safe.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#2020-sprint-2&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-sprint-2&quot;&gt;&lt;/a&gt;2020 sprint 2&lt;/h2&gt;
&lt;p&gt;We plan to begin the next sprint of 2020 next Tuesday, March 31st. We'll briefly cover a few goals:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#how-to-get-involved&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;how-to-get-involved&quot;&gt;&lt;/a&gt;How to get involved&lt;/h3&gt;
&lt;p&gt;If you'd like to get involved, please drop in on the &lt;a href=&quot;https://rust-lang.zulipchat.com/&quot;&gt;rust-lang Zulip&lt;/a&gt; in the &lt;code&gt;#wg-traits&lt;/code&gt; stream. We also have a &lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=b2hhbXZ2YzcxNzhsMTZqNHFibGxpMmZubjRfMjAyMDAzMzFUMjAwMDAwWiA2dTVycnRjZTZscnR2MDdwZmkzZGFtZ2p1c0Bn&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&amp;scp=ALL&quot;&gt;weekly design meeting&lt;/a&gt; (held on Zulip) that we use to sync up on progress and discuss tricky issues.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#chalk-rustc-integration-mvp&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;chalk-rustc-integration-mvp&quot;&gt;&lt;/a&gt;Chalk rustc-integration MVP&lt;/h3&gt;
&lt;p&gt;It will be a bit of a stretch, but we hope that this sprint we can complete work on a &amp;quot;MVP&amp;quot; of chalk-rustc integration that we can use to drive further development. This MVP will be unsound and incomplete (for example, it will likely not enforce borrow checker rules correctly), but it will help us to uncover corner cases and to validate the design of the chalk solver. Towards this end, we have a number of concrete tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/chalk/issues/363&quot;&gt;Extending chalk with support for builtin traits like &lt;code&gt;Sized&lt;/code&gt;, &lt;code&gt;Copy&lt;/code&gt;, and &lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;There are several traits for which the precise rules are not expressed as ordinary impls, but rather require special integration in the library itself. Chalk doesn't currently have any support for these traits, so we need to extend it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Land existing branch&lt;/li&gt;
&lt;li&gt;Converting rustc types into chalk types
&lt;ul&gt;
&lt;li&gt;Eventually, we hope to have rustc and chalk sharing the same type library, so that no bridging is needed between them. But creating such a library will take a while. So, in the interim, we will write code that converts rustc types into chalk types on demand. (Some of the other sprint goals, meanwhile, will be adapting rustc types so that we are also moving towards our eventual goal.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#design-meeting-for-const-integration&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;design-meeting-for-const-integration&quot;&gt;&lt;/a&gt;Design meeting for &lt;code&gt;const&lt;/code&gt; integration&lt;/h3&gt;
&lt;p&gt;As mentioned in the previous section, our initial Chalk rustc-integration MVP won't have support for &lt;code&gt;const&lt;/code&gt;. During this sprint, we plan on &lt;a href=&quot;https://github.com/rust-lang/wg-traits/issues/15&quot;&gt;scheduling a design meeting&lt;/a&gt; to specifically flesh out some of the design about what &lt;code&gt;const&lt;/code&gt; &lt;em&gt;would&lt;/em&gt; look like. Actual implementation will be left for a later sprint.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#move-towards-aligning-rustc-and-chalk-types&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;move-towards-aligning-rustc-and-chalk-types&quot;&gt;&lt;/a&gt;Move towards aligning rustc and Chalk types&lt;/h3&gt;
&lt;p&gt;During this sprint, we plan to start working towards extracting a shared library for Rust types, as discussed in the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/design-meeting/2020-03-12-shared-library-for-types/&quot;&gt;design meeting&lt;/a&gt; mentioned previously. This will involve work on refactoring rustc as well as changes to chalk. (&lt;a href=&quot;https://github.com/rust-lang/wg-traits/issues/16&quot;&gt;Tracking issue.&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#land-basic-support-for-impl-trait&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;land-basic-support-for-impl-trait&quot;&gt;&lt;/a&gt;Land basic support for &lt;code&gt;impl Trait&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We expect to land basic support for &lt;code&gt;impl Trait&lt;/code&gt; fairly early in the next sprint. However, there is some &lt;a href=&quot;https://github.com/rust-lang/chalk/issues/335&quot;&gt;followup work&lt;/a&gt; to be done to further refine the implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#exploratory-implementations-and-research&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;exploratory-implementations-and-research&quot;&gt;&lt;/a&gt;Exploratory implementations and research&lt;/h3&gt;
&lt;p&gt;In addition to the more concrete goals, there is also some exploratory work being done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/chalk/issues/351&quot;&gt;Implementating a recursive solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/chalk/issues/364&quot;&gt;Converting semantic to syntactic equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/chalk/issues/365&quot;&gt;Outputting a file for reproducing bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#chalk-performance-work&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;chalk-performance-work&quot;&gt;&lt;/a&gt;Chalk performance work&lt;/h3&gt;
&lt;p&gt;Most of the work on Chalk has been focused on design, and &lt;em&gt;not much&lt;/em&gt; has been done to optimize performance. While the particular &amp;quot;end goal&amp;quot; isn't clear here, we hope to start by createing a set of memory, cpu, and time benchmarks for Chalk. With this framework, we can diagnose specific performance issues and monitor future changes for regressions. Part of this will be to &lt;a href=&quot;https://github.com/rust-lang/chalk/issues/337&quot;&gt;land&lt;/a&gt; &lt;code&gt;tracing&lt;/code&gt; support.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#improving-the-skill-tree&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;improving-the-skill-tree&quot;&gt;&lt;/a&gt;Improving the skill tree&lt;/h3&gt;
&lt;p&gt;The skill tree has been a useful tool for helping us organize our work and track our status and overall plan. However, the current output is not exactly self explanatory, nor is it particularly attractive. The ultimate goal is to generate pictures similar to Lin's &lt;a href=&quot;https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/&quot;&gt;hand drawn artwork&lt;/a&gt;. There are also some missing features. If there is someone out there interested in taking a stab at improving the quality of the output, or adding features, that would be great! skill-tree lives in its own &lt;a href=&quot;https://github.com/nikomatsakis/skill-tree&quot;&gt;github repo&lt;/a&gt;, but just drop by the &lt;code&gt;#wg-traits&lt;/code&gt; stream on Zulip to chat about it.&lt;/p&gt;
</content>

        <author>
            <name>Jack Huey</name>
        </author>
    </entry>
    
    <entry>
        <title>Goodbye, docs team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/03/27/goodbye-docs-team.html" type="text/html" title="Goodbye, docs team" />
        <published>2020-03-27T00:00:00+00:00</published>
        <updated>2020-03-27T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/03/27/goodbye-docs-team.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/03/27/goodbye-docs-team.html">&lt;p&gt;I'll cut right to the chase: the docs team no longer exists.&lt;/p&gt;
&lt;p&gt;Back in &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/1683&quot;&gt;August of 2016&lt;/a&gt;, we
formed a team to work on documenting Rust. Here's the original description
and motivation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Rust documentation team will be responsible for all of the things
listed above. Specifically, they will pertain to these areas of the Rust
project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The standard library documentation&lt;/li&gt;
&lt;li&gt;The book and other long-form docs&lt;/li&gt;
&lt;li&gt;Cargo's documentation&lt;/li&gt;
&lt;li&gt;The Error Index&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, the documentation team will be available to help with
ecosystem documentation, in a few ways. Firstly, in an advisory capacity:
helping people who want better documentation for their crates to understand
how to accomplish that goal. Furthermore, monitoring the overall ecosystem
documentation, and identifying places where we could contribute and make a
large impact for all Rustaceans. If the Rust project itself has wonderful
docs, but the ecosystem has terrible docs, then people will still be
frustrated with Rust's documentation situation, especially given our
anti-batteries-included attitude. To be clear, this does not mean owning the
ecosystem docs, but rather working to contribute in more ways than just the
Rust project itself.&lt;/p&gt;
&lt;p&gt;We will coordinate in the #rust-docs IRC room, and have regular meetings,
as the team sees fit. Regular meetings will be important to coordinate
broader goals; and participation will be important for team members. We hold
meetings weekly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the time, all of this was sorely needed. There weren't as many people working
on Rust, and there wasn't that much documentation.&lt;/p&gt;
&lt;p&gt;But documentation is a funny thing. It's really a cross-cutting concern. One
team of folks writing docs for tons of other teams of folks doesn't really
&lt;em&gt;work&lt;/em&gt;, long-term. In the short term, it was an absolutely necessary and good
strategy. Today, it doesn't make as much sense. Let's look again at those original
resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The standard library's documentation is pretty much filled out, and when new APIs
are added, the libs team writes some initial docs.&lt;/li&gt;
&lt;li&gt;The book is maintained by Steve and Carol.&lt;/li&gt;
&lt;li&gt;Cargo's documentation is the responsibility of the Cargo team (and the docs
team never really helped here. I always wanted to, but years later, it just
hasn't worked out.)&lt;/li&gt;
&lt;li&gt;The error index describes compiler errors, and so that's the compiler team's
job.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We've also added way more stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust by Example&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;rustc&lt;/code&gt; book and &lt;code&gt;rustc&lt;/code&gt; guide&lt;/li&gt;
&lt;li&gt;The reference&lt;/li&gt;
&lt;li&gt;The nomicon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list goes on and on. And all this time, the membership of the team didn't
really grow; I tried several times to get folks involved, but most people
just plain don't like writing docs. At this point, the only person really
writing docs is me, and I haven't had a ton of time lately either. So we
haven't had a docs team meeting since August of 2018. There also aren't
really docs RFCs these days. As such, this blog post isn't really announcing
the end of the docs team as much as it is describing what is already true
today.&lt;/p&gt;
&lt;p&gt;I will still be doing my work on core, and the book. And I plan on submitting
some more docs PRs in the future.&lt;/p&gt;
&lt;p&gt;I would like to thank everyone who's been on the team in the past, and
everyone who's submitted documentation PRs over the years. A lot of people
really love Rust's documentation, and that wouldn't have been possible
without all of you.&lt;/p&gt;
</content>

        <author>
            <name>Steve Klabnik</name>
        </author>
    </entry>
    
    <entry>
        <title>rustc-dev-guide Overview</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/03/26/rustc-dev-guide-overview.html" type="text/html" title="rustc-dev-guide Overview" />
        <published>2020-03-26T00:00:00+00:00</published>
        <updated>2020-03-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/03/26/rustc-dev-guide-overview.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/03/26/rustc-dev-guide-overview.html">&lt;p&gt;The &lt;code&gt;rustc&lt;/code&gt; compiler includes over 380,000 lines of source across more than 40 crates&lt;sup&gt;1&lt;/sup&gt; to support the lexing through binary linking stages of the Rust compile process. It is daunting for newcomers, and we recognize that a high-level survey of the pipeline is warranted.&lt;/p&gt;
&lt;p&gt;In our &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2019/12/20/wg-learning-update.html&quot;&gt;December update&lt;/a&gt;, we announced plans for the publication of the &amp;quot;rustc-dev-guide Overview&amp;quot;. Our goal is to describe the integrated components of the compiler in a high-level document for users and potential developers. The Overview will be published at the beginning of the &lt;a href=&quot;https://rustc-dev-guide.rust-lang.org/&quot;&gt;rustc-dev-guide&lt;/a&gt; to orient readers to the more detailed documentation of the compiler in subsequent chapters.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#rustc-overview-structure&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rustc-overview-structure&quot;&gt;&lt;/a&gt;Rustc Overview Structure&lt;/h2&gt;
&lt;p&gt;We will break the compiler down to address two questions at a high-level:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What does the compiler do to your source code?&lt;/li&gt;
&lt;li&gt;How does the compiler do it?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we address these general areas, we will provide a synopsis that briefly covers frequent community questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the conflicting goals of the compiler, and how are issues like compiler speed, compiler memory usage, program speed, program size, and compiler stability/correctness balanced?&lt;/li&gt;
&lt;li&gt;What are the stages of the compile process, and how do they fit together?&lt;/li&gt;
&lt;li&gt;What are the intermediate representations of my source code?&lt;/li&gt;
&lt;li&gt;What happens to generics during the compile process?&lt;/li&gt;
&lt;li&gt;What kind of optimizations are performed during the compile process?&lt;/li&gt;
&lt;li&gt;How does incremental compilation work?&lt;/li&gt;
&lt;li&gt;Does &lt;code&gt;rustc&lt;/code&gt; have support for parallel compilation?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#get-involved&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;get-involved&quot;&gt;&lt;/a&gt;Get Involved!&lt;/h2&gt;
&lt;p&gt;Work is in progress on the Overview, and we need your help. A working draft of the document is available in &lt;a href=&quot;https://github.com/rust-lang/rustc-dev-guide/pull/633&quot;&gt;this pull request&lt;/a&gt; on the &lt;code&gt;rustc-dev-guide&lt;/code&gt; GitHub repository.&lt;/p&gt;
&lt;p&gt;If there is an area of &lt;code&gt;rustc&lt;/code&gt; that you would like to understand better and it is appropriate for an overview document, please open an issue on our &lt;a href=&quot;https://github.com/rust-lang/rustc-dev-guide/issues&quot;&gt;issue tracker&lt;/a&gt; to let us know.&lt;/p&gt;
&lt;p&gt;And if you know the compiler and want to pitch in on the rustc-dev-guide Overview, open a pull request with your revisions. We welcome your contributions and look forward to your participation!&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#interested-in-learning-working-group&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;interested-in-learning-working-group&quot;&gt;&lt;/a&gt;Interested in Learning (Working Group)?&lt;/h2&gt;
&lt;p&gt;Are you interested in learning more about the &lt;code&gt;rustc&lt;/code&gt; compiler and teaching others? Drop by our &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/196385-t-compiler.2Fwg-rustc-dev-guide&quot;&gt;Zulip stream&lt;/a&gt; and say hello!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; These numbers account for lines in Rust files across all dependencies necessary to build &lt;code&gt;rustc&lt;/code&gt;. Thanks to @LeSeulArtichaut for these calculations! See &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/196385-t-compiler.2Fwg-rustc-dev-guide/topic/The.20Rustc.20Overview.3A.20blog.20post/near/189441101&quot;&gt;the notes on Zulip&lt;/a&gt; for additional details.&lt;/p&gt;
</content>

        <author>
            <name>Chris Simpkins</name>
        </author>
    </entry>
    
    <entry>
        <title>Resolving Rust's forward progress guarantees</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/03/19/terminating-rust.html" type="text/html" title="Resolving Rust's forward progress guarantees" />
        <published>2020-03-19T00:00:00+00:00</published>
        <updated>2020-03-19T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/03/19/terminating-rust.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/03/19/terminating-rust.html">&lt;p&gt;There has been a longstanding miscompilation in Rust: programs that do not make
&lt;a href=&quot;https://en.cppreference.com/w/cpp/language/memory_model#Forward_progress&quot;&gt;forward progress&lt;/a&gt;. Note that the previous link is to the C++ definition; Rust
is not C++, but currently LLVM optimizes all LLVM IR with the assumption that a
lack of forward progress is undefined behavior.&lt;/p&gt;
&lt;p&gt;Note also that Rust does not define a lack of forward progress as &lt;a href=&quot;https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#undefined-behavior&quot;&gt;undefined
behavior&lt;/a&gt;, while C++ does. It is particularly common to encounter the
miscompilation &amp;quot;intentionally&amp;quot; when writing panic handlers and other such code
with a body of &lt;code&gt;loop {}&lt;/code&gt;. Some users also report that they've unintentionally
hit this bug in recursive code which accidentally lacks a base case.&lt;/p&gt;
&lt;p&gt;Somewhat recently, LLVM added an intrinsic which tells the optimizer that
forward progress has been made. On nightly Rust, you can enable this with
&lt;code&gt;-Zinsert-sideeffect&lt;/code&gt;, which will use some heuristics to insert it where it's
possibly needed (currently, massively overshooting the minimal set).&lt;/p&gt;
&lt;p&gt;However, recent attempts to enable this intrinsic by default hit a snag: it's
very expensive on compile times to do so (&lt;a href=&quot;https://perf.rust-lang.org/compare.html?start=66b0c97070f422cb82baaaafc79ee94cab4396c5&amp;end=548b5e75afd6bad696920dfdb69c9812ce0488f1&quot;&gt;3-30% regressions&lt;/a&gt;). There is some runtime effect as well; check builds (which do not
generate LLVM IR or run LLVM passes) regressed by up to 3-7%.&lt;/p&gt;
&lt;p&gt;The current implementation in rustc emits calls to the side effect intrinsic
very aggressively; certainly in way more cases than is strictly necessary.
However, there's not really any good ideas on how to improve the analysis rustc
does without missing edge cases: we'd have to be &amp;quot;as good&amp;quot; as LLVM to emit only
when necessary.&lt;/p&gt;
&lt;p&gt;Upstream, in LLVM, discussion has been ongoing for some time around whether, and
how to, adjust LLVM's model to permit frontends for languages like Rust to
opt-out of the forward progress guarantees. It seems unlikely that a solution
will materialize in upstream LLVM that allows us to opt-out in the short term.&lt;/p&gt;
&lt;p&gt;However, having said that, side effect itself is likely improvable to at least
avoid the excessive consecutive calls, as demonstrated by this &lt;a href=&quot;https://gist.github.com/nikic/7e521def71d106c345a255e464b18d3f&quot;&gt;IR&lt;/a&gt;
that occurs after LLVM optimizations. It seems plausible that those
improvements may also reduce the compile time hit that we see when enabling
side effect on the rustc side. Having said that, how simple these improvements
are is unclear.&lt;/p&gt;
&lt;p&gt;We would love to hear feedback and suggestions on how to resolve this problem!
Please leave feedback on &lt;a href=&quot;https://internals.rust-lang.org/t/resolving-rusts-forward-progress-guarantees/12003&quot;&gt;this internals
thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>All Hands Retrospective</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/03/18/all-hands-retrospective.html" type="text/html" title="All Hands Retrospective" />
        <published>2020-03-18T00:00:00+00:00</published>
        <updated>2020-03-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/03/18/all-hands-retrospective.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/03/18/all-hands-retrospective.html">&lt;p&gt;If you're not already aware, the Rust All Hands event, originally scheduled for
March 16th–20th in Thessaloníki, Greece was cancelled in January. The All Hands'
is one of our members' favourite events of the year and we were quite
disappointed that we weren't able to pull off the event this year. In the
interest of being transparent, as well as documenting for future events, we
have written a retrospective about what happened, what we learned, and the
future of the All Hands.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#timeline&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;timeline&quot;&gt;&lt;/a&gt;Timeline&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;#context&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;context&quot;&gt;&lt;/a&gt;Context&lt;/h3&gt;
&lt;p&gt;Both previous All Hands took place in Mozilla's Berlin office. Mozilla
traditionally sponsored the event, providing the venue and catering, and also
paying for the flights and accommodation of volunteers who didn't have a
company or other person to pay for them. It was a good way to bring the entire
community together for a week of planning, discussions, and camaraderie.&lt;/p&gt;
&lt;p&gt;Still, after the last All Hands, it was clear that we couldn't do a third one
in Mozilla's Berlin office. The Rust org was simply growing too big. The
Berlin office didn't really have the space to accommodate us.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#finding-a-space&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;finding-a-space&quot;&gt;&lt;/a&gt;Finding a space.&lt;/h3&gt;
&lt;p&gt;As a group, our first step was to see if we could find other companies to
sponsor a space. We followed a number of leads but ultimately never found
anyone that had a space to offer at a suitable time. We started looking
at other options, like private hacker spaces and universities. The University
of Macedonia in Thessaloniki, Greece made us a quite attractive offer, and
they had the right time available, so we decided to go for that.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#budgeting-and-sponsorships&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;budgeting-and-sponsorships&quot;&gt;&lt;/a&gt;Budgeting and sponsorships.&lt;/h3&gt;
&lt;p&gt;We in the All Hands group did our best to create a budget. Unfortunately we
did not have access to any expense reports from the previous years. We had a
survey we could use to estimate the number of attendees and a rough idea where
they were coming from. We knew the costs of the venue. We added fudge factors.
We thought we'd done a good job, though it would turn out that we were quite
off in our calculations.&lt;/p&gt;
&lt;p&gt;However even based on our estimated budget, it was clear that Mozilla was not
going to be able to cover the costs alone. This seemed like a good opportunity
to try and build relationships with some of the companies that have started to
use Rust by approaching them for sponsorships. We weren't sure, though, how
many sponsorships we'd be able to get, and so we hit upon the idea of using
paid tickets.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#tickets&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;tickets&quot;&gt;&lt;/a&gt;Tickets&lt;/h3&gt;
&lt;p&gt;The idea was that people could purchase a ticket to the event, which would
help to cover the costs, but that it was also okay to have a &lt;em&gt;&amp;quot;gratis&amp;quot;&lt;/em&gt;
ticket. Tickets have the advantage of being relatively easy for people to
submit in their expense report if they are travelling with a company. We also
found a number of companies who might be interested in a more
traditional sponsorship.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#finding-a-bank-account&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;finding-a-bank-account&quot;&gt;&lt;/a&gt;Finding a bank account.&lt;/h3&gt;
&lt;p&gt;Still, we had another problem. The Rust organisation does not have a bank
account we could use to collect and distribute money, and we didn't have an
obvious entity to sign legal agreements.&lt;/p&gt;
&lt;p&gt;At this point, we spoke to a company that might serve as a bank account. We
had a quick call and went over a plan that seemed promising. Mozilla would
contract with them for their services managing and organising the event, and
this would serve as Mozilla's sponsorship. The other sponsorships and proceeds
from ticket sales would collect in their bank account and we would
manage distributions.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#pulling-the-trigger&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;pulling-the-trigger&quot;&gt;&lt;/a&gt;Pulling the trigger.&lt;/h3&gt;
&lt;p&gt;At that point, we sent mail encouraging people to book tickets, and we also
started following up more with sponsors. Our expectation was that we would
soon have a bank account for collecting funds, and we started collecting
information to repay people who had booked travel.&lt;/p&gt;
&lt;p&gt;In retrospect, it's clear that this was premature. It seemed like all the
pieces were in place, and we knew that if people didn't start booking tickets,
they never would. But the pieces were not in place, not actually, and we clearly
should have taken this moment ask whether we were really going to be able to
pull this off.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#realising-it-wont-work&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;realising-it-wont-work&quot;&gt;&lt;/a&gt;Realising it won't work.&lt;/h3&gt;
&lt;p&gt;This all started to unravel about a month before the event. In short, we
encountered some logistical hurdles around finalising the business and legal
aspects within the organisation's constraints that also prompted us to review
the finances in more detail. This revealed that our estimates were off. Thus,
we were faced with a tough decision:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If we continue with the event, there was the chance that the logistics would
just fail to come together. That would leave attendees in Greece, out of
pocket, and without an All Hands to attend.&lt;/li&gt;
&lt;li&gt;Further, we might not be able to raise enough money to be able to pay for
the entirety of people's travel and lodging as we had promised. This would be
unfortunate, though perhaps something people could live with.&lt;/li&gt;
&lt;li&gt;On the other hand, if we cancel, we have to deal with the fact that people
had already started booking travel, and not everyone would be able to get a
refund from their airline/hotel, and accept that there might not be an
All Hands this year.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After much analysis and discussion with the Rust core team, we ultimately
opted for the painful but ultimately safer route: cancelling the event. The
cost to cover cancelling in January was relatively low, and even if it did
come together we were worried about the high stress of pulling it off burning
people out of the project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Addendum&lt;/strong&gt; Since we cancelled the All Hands, outbreak of the &lt;a href=&quot;https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic&quot;&gt;COVID-19&lt;/a&gt; in
Europe in the recent weeks, would have caused the event to be cancelled
regardless. In a weird twist of fate, we were fortunate to cancel when we did.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#lessons-learned&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;lessons-learned&quot;&gt;&lt;/a&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bound uncertainty and total cost.&lt;/strong&gt; — Promising to cover all travel with
no kind of upper limit was unwise. It had worked in the past, perhaps, but the
event was growing, and that was partly luck. Organising an event is very complex
and there are a lot of unknowns, and it was clear for some of them we didn't have
the time or resources to resolve them adequately.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Location, location, location&lt;/strong&gt; — It was hard to find a good location. While
Thessaloníki was cheap and great in some ways, we encountered some logistical
hiccups that made it less than ideal. For example; we found that the cost of a
lot of the flights for our international members were quite high compared to
other European cities.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Know your audience&lt;/strong&gt; — Some companies weren't interested in sponsoring
because the event wasn't sufficiently high profile, or because the &amp;quot;ROI&amp;quot;
(&amp;quot;Return On Investment&amp;quot;) didn't quite fit into the budgets and categories it
would have to come from. We also had some uncertainty about how much
&amp;quot;participation&amp;quot; to offer in exchange for sponsorship, since we didn't want to
give the impression that anyone could just &amp;quot;buy their way&amp;quot; into the All Hands —
at the same time, there is clear value to the Rust organisation in having
sponsors participate.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#the-future&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;the-future&quot;&gt;&lt;/a&gt;The Future&lt;/h2&gt;
&lt;p&gt;Right now, we're currently organising with Mozilla reimbursing anyone who had
purchased non-refundable ticket. We're also going to take the time to step back
and re-evaluate what kind of event is possible, and what kind of event our
members want to attend.&lt;/p&gt;
&lt;p&gt;If you're a member of the Rust programming language organisation, you should
have received an email containing a link to a survey asking you about what
kind of All Hands you'd enjoy, and what you would want to attend. Once people
have had enough time to respond, we'll publish the results on the
&amp;quot;Inside Rust&amp;quot; blog.&lt;/p&gt;
&lt;p&gt;If you didn't receive an email and you believe you should have, or you have
anything you'd like to mention in private to organisers. Please email us
at &lt;a href=&quot;mailto:rust-all-hands@rust-lang.org&quot;&gt;rust-all-hands@rust-lang.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's very unfortunate that we weren't able to have the All Hands like we
planned. We know that it's a lot of our members favourite Rust event, and we
would like to thank everyone for reaching out and being so understanding.&lt;/p&gt;
</content>

        <author>
            <name>Erin Power</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 12 March 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/03/17/governance-wg.html" type="text/html" title="Governance Working Group Update: Meeting 12 March 2020" />
        <published>2020-03-17T00:00:00+00:00</published>
        <updated>2020-03-17T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/03/17/governance-wg.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/03/17/governance-wg.html">&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;We held another meeting of the Rust Governance Working Group on Zulip on 12 March.&lt;/p&gt;
&lt;p&gt;The agenda included&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow up on &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;the Project Group RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow up on moving repositories (community, devtools, and nursery) into the &lt;a href=&quot;https://github.com/rust-lang/&quot;&gt;Rust-Lang GitHub Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pre-RFC process&lt;/li&gt;
&lt;li&gt;How to manage RFC discussion&lt;/li&gt;
&lt;li&gt;Plan Agenda for Next time&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.03.12.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow up on the &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;Project Group RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow up on moving repos from community, devtools, and nursery into the &lt;a href=&quot;https://github.com/rust-lang&quot;&gt;Rust-Lang GitHub Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pre-RFC process&lt;/li&gt;
&lt;li&gt;Managing RFC discussions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Our next meeting will be 26 March 2020 via &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/223182-wg-governance&quot;&gt;Zulip&lt;/a&gt; 18-19 CET / 1pm-2pm EST / 10-11am PST.&lt;/li&gt;
&lt;li&gt;In 2020 the agenda is always at https://hackmd.io/ATj1rZJaRimaIfIWfAOYfQ&lt;/li&gt;
&lt;li&gt;Current plan is:
&lt;ol&gt;
&lt;li&gt;Domain Working Group changes&lt;/li&gt;
&lt;li&gt;Pre-RFC RFC (if ready)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Nell Shamrell-Harrington</name>
        </author>
    </entry>
    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/03/13/upcoming-compiler-team-design-meetings.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-03-13T00:00:00+00:00</published>
        <updated>2020-03-13T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/03/13/upcoming-compiler-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/03/13/upcoming-compiler-team-design-meetings.html">&lt;p&gt;In our &lt;a href=&quot;https://zulip-archive.rust-lang.org/131828tcompiler/40166planningmeeting20200313.html&quot;&gt;planning meeting today&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On April 3rd (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGxqdmpndjI3N3FsZTM0bnRyNDU2NHNoYjMgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/257&quot;&gt;rust-lang/compiler-team#257&lt;/a&gt;, which is a proposal to move the
&amp;quot;in-progress&amp;quot; rustc cranelift backend in tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
</feed>
